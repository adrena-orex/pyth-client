/* automatically generated by rust-bindgen 0.60.1 */

# [repr (C)] # [derive (Default)] pub struct __IncompleteArrayField < T > (:: std :: marker :: PhantomData < T > , [T ; 0]) ; impl < T > __IncompleteArrayField < T > { # [inline] pub const fn new () -> Self { __IncompleteArrayField (:: std :: marker :: PhantomData , []) } # [inline] pub fn as_ptr (& self) -> * const T { self as * const _ as * const T } # [inline] pub fn as_mut_ptr (& mut self) -> * mut T { self as * mut _ as * mut T } # [inline] pub unsafe fn as_slice (& self , len : usize) -> & [T] { :: std :: slice :: from_raw_parts (self . as_ptr () , len) } # [inline] pub unsafe fn as_mut_slice (& mut self , len : usize) -> & mut [T] { :: std :: slice :: from_raw_parts_mut (self . as_mut_ptr () , len) } } impl < T > :: std :: fmt :: Debug for __IncompleteArrayField < T > { fn fmt (& self , fmt : & mut :: std :: fmt :: Formatter < '_ >) -> :: std :: fmt :: Result { fmt . write_str ("__IncompleteArrayField") } } pub const true_ : u32 = 1 ; pub const false_ : u32 = 0 ; pub const __bool_true_false_are_defined : u32 = 1 ; pub const PYTH_ORACLE_UTIL_COMPAT_STDINT_STYLE : u32 = 1 ; pub const INT8_MIN : i32 = - 128 ; pub const INT16_MIN : i32 = - 32768 ; pub const INT32_MIN : i32 = - 2147483648 ; pub const INT64_MIN : i64 = - 9223372036854775808 ; pub const INT8_MAX : u32 = 127 ; pub const INT16_MAX : u32 = 32767 ; pub const INT32_MAX : u32 = 2147483647 ; pub const INT64_MAX : u64 = 9223372036854775807 ; pub const UINT8_MAX : u32 = 255 ; pub const UINT16_MAX : u32 = 65535 ; pub const UINT32_MAX : u32 = 4294967295 ; pub const UINT64_MAX : i32 = - 1 ; pub const NULL : u32 = 0 ; pub const SUCCESS : u32 = 0 ; pub const BLAKE3_RESULT_LENGTH : u32 = 32 ; pub const SIZE_PUBKEY : u32 = 32 ; pub const MAX_PERMITTED_DATA_INCREASE : u32 = 10240 ; pub const KECCAK_RESULT_LENGTH : u32 = 32 ; pub const HEAP_START_ADDRESS : u64 = 12884901888 ; pub const HEAP_LENGTH : u32 = 32768 ; pub const MAX_RETURN_DATA : u32 = 1024 ; pub const SECP256K1_RECOVER_HASH_LENGTH : u32 = 32 ; pub const SECP256K1_RECOVER_SIGNATURE_LENGTH : u32 = 64 ; pub const SECP256K1_RECOVER_RESULT_LENGTH : u32 = 64 ; pub const SECP256K1_RECOVER_ERROR_INVALID_HASH : u32 = 1 ; pub const SECP256K1_RECOVER_ERROR_INVALID_RECOVERY_ID : u32 = 2 ; pub const SECP256K1_RECOVER_ERROR_INVALID_SIGNATURE : u32 = 3 ; pub const SHA256_RESULT_LENGTH : u32 = 32 ; pub const PC_MAGIC : u32 = 2712847316 ; pub const PC_VERSION : u32 = 2 ; pub const PC_MAX_SEND_LATENCY : u32 = 25 ; pub const PC_PUBKEY_SIZE : u32 = 32 ; pub const PC_MAP_TABLE_SIZE : u32 = 640 ; pub const PC_COMP_SIZE : u32 = 32 ; pub const PC_PROD_ACC_SIZE : u32 = 512 ; pub const PC_EXP_DECAY : i32 = - 9 ; pub const PC_HEAP_START : u64 = 12884901888 ; pub const PC_PTYPE_UNKNOWN : u32 = 0 ; pub const PC_PTYPE_PRICE : u32 = 1 ; pub const PC_STATUS_UNKNOWN : u32 = 0 ; pub const PC_STATUS_TRADING : u32 = 1 ; pub const PC_STATUS_HALTED : u32 = 2 ; pub const PC_STATUS_AUCTION : u32 = 3 ; pub const PC_STATUS_IGNORED : u32 = 4 ; pub const PC_ACCTYPE_MAPPING : u32 = 1 ; pub const PC_ACCTYPE_PRODUCT : u32 = 2 ; pub const PC_ACCTYPE_PRICE : u32 = 3 ; pub const PC_ACCTYPE_TEST : u32 = 4 ; pub const PC_ACCTYPE_PERMISSIONS : u32 = 5 ; pub const CU_BUDGET_PER_IX : u32 = 20000 ; pub type size_t = :: std :: os :: raw :: c_ulong ; pub type wchar_t = :: std :: os :: raw :: c_int ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct max_align_t { pub __clang_max_align_nonce1 : :: std :: os :: raw :: c_longlong , pub __clang_max_align_nonce2 : f64 , } # [test] fn bindgen_test_layout_max_align_t () { assert_eq ! (:: std :: mem :: size_of :: < max_align_t > () , 16usize , concat ! ("Size of: " , stringify ! (max_align_t))) ; assert_eq ! (:: std :: mem :: align_of :: < max_align_t > () , 8usize , concat ! ("Alignment of " , stringify ! (max_align_t))) ; fn test_field___clang_max_align_nonce1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < max_align_t > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . __clang_max_align_nonce1) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (max_align_t) , "::" , stringify ! (__clang_max_align_nonce1))) ; } test_field___clang_max_align_nonce1 () ; fn test_field___clang_max_align_nonce2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < max_align_t > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . __clang_max_align_nonce2) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (max_align_t) , "::" , stringify ! (__clang_max_align_nonce2))) ; } test_field___clang_max_align_nonce2 () ; } pub type ssize_t = i64 ; # [doc = " Byte array pointer and string"] # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct SolBytes { pub addr : * const u8 , # [doc = " bytes"] pub len : u64 , } # [test] fn bindgen_test_layout_SolBytes () { assert_eq ! (:: std :: mem :: size_of :: < SolBytes > () , 16usize , concat ! ("Size of: " , stringify ! (SolBytes))) ; assert_eq ! (:: std :: mem :: align_of :: < SolBytes > () , 8usize , concat ! ("Alignment of " , stringify ! (SolBytes))) ; fn test_field_addr () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SolBytes > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . addr) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (SolBytes) , "::" , stringify ! (addr))) ; } test_field_addr () ; fn test_field_len () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SolBytes > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . len) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (SolBytes) , "::" , stringify ! (len))) ; } test_field_len () ; } extern "C" { pub fn sol_panic_ (arg1 : * const :: std :: os :: raw :: c_char , arg2 : u64 , arg3 : u64 , arg4 : u64) ; } extern "C" { pub fn sol_blake3 (arg1 : * const SolBytes , arg2 : :: std :: os :: raw :: c_int , arg3 : * const u8) -> u64 ; } # [doc = " Public key"] # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct SolPubkey { pub x : [u8 ; 32usize] , } # [test] fn bindgen_test_layout_SolPubkey () { assert_eq ! (:: std :: mem :: size_of :: < SolPubkey > () , 32usize , concat ! ("Size of: " , stringify ! (SolPubkey))) ; assert_eq ! (:: std :: mem :: align_of :: < SolPubkey > () , 1usize , concat ! ("Alignment of " , stringify ! (SolPubkey))) ; fn test_field_x () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SolPubkey > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . x) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (SolPubkey) , "::" , stringify ! (x))) ; } test_field_x () ; } extern "C" { pub fn sol_log_pubkey (arg1 : * const SolPubkey) ; } # [doc = " Seed used to create a program address or passed to sol_invoke_signed"] # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct SolSignerSeed { pub addr : * const u8 , # [doc = " Seed bytes"] pub len : u64 , } # [test] fn bindgen_test_layout_SolSignerSeed () { assert_eq ! (:: std :: mem :: size_of :: < SolSignerSeed > () , 16usize , concat ! ("Size of: " , stringify ! (SolSignerSeed))) ; assert_eq ! (:: std :: mem :: align_of :: < SolSignerSeed > () , 8usize , concat ! ("Alignment of " , stringify ! (SolSignerSeed))) ; fn test_field_addr () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SolSignerSeed > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . addr) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (SolSignerSeed) , "::" , stringify ! (addr))) ; } test_field_addr () ; fn test_field_len () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SolSignerSeed > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . len) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (SolSignerSeed) , "::" , stringify ! (len))) ; } test_field_len () ; } # [doc = " Seeds used by a signer to create a program address or passed to"] # [doc = " sol_invoke_signed"] # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct SolSignerSeeds { pub addr : * const SolSignerSeed , # [doc = " An array of a signer's seeds"] pub len : u64 , } # [test] fn bindgen_test_layout_SolSignerSeeds () { assert_eq ! (:: std :: mem :: size_of :: < SolSignerSeeds > () , 16usize , concat ! ("Size of: " , stringify ! (SolSignerSeeds))) ; assert_eq ! (:: std :: mem :: align_of :: < SolSignerSeeds > () , 8usize , concat ! ("Alignment of " , stringify ! (SolSignerSeeds))) ; fn test_field_addr () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SolSignerSeeds > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . addr) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (SolSignerSeeds) , "::" , stringify ! (addr))) ; } test_field_addr () ; fn test_field_len () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SolSignerSeeds > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . len) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (SolSignerSeeds) , "::" , stringify ! (len))) ; } test_field_len () ; } extern "C" { pub fn sol_create_program_address (arg1 : * const SolSignerSeed , arg2 : :: std :: os :: raw :: c_int , arg3 : * const SolPubkey , arg4 : * mut SolPubkey) -> u64 ; } extern "C" { pub fn sol_try_find_program_address (arg1 : * const SolSignerSeed , arg2 : :: std :: os :: raw :: c_int , arg3 : * const SolPubkey , arg4 : * mut SolPubkey , arg5 : * mut u8) -> u64 ; } # [doc = " Keyed Account"] # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct SolAccountInfo { pub key : * mut SolPubkey , # [doc = " Public key of the account"] pub lamports : * mut u64 , # [doc = " Number of lamports owned by this account"] pub data_len : u64 , # [doc = " Length of data in bytes"] pub data : * mut u8 , # [doc = " On-chain data within this account"] pub owner : * mut SolPubkey , # [doc = " Program that owns this account"] pub rent_epoch : u64 , # [doc = " The epoch at which this account will next owe rent"] pub is_signer : bool , # [doc = " Transaction was signed by this account's key?"] pub is_writable : bool , # [doc = " Is the account writable?"] pub executable : bool , } # [test] fn bindgen_test_layout_SolAccountInfo () { assert_eq ! (:: std :: mem :: size_of :: < SolAccountInfo > () , 56usize , concat ! ("Size of: " , stringify ! (SolAccountInfo))) ; assert_eq ! (:: std :: mem :: align_of :: < SolAccountInfo > () , 8usize , concat ! ("Alignment of " , stringify ! (SolAccountInfo))) ; fn test_field_key () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SolAccountInfo > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . key) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (SolAccountInfo) , "::" , stringify ! (key))) ; } test_field_key () ; fn test_field_lamports () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SolAccountInfo > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lamports) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (SolAccountInfo) , "::" , stringify ! (lamports))) ; } test_field_lamports () ; fn test_field_data_len () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SolAccountInfo > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . data_len) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (SolAccountInfo) , "::" , stringify ! (data_len))) ; } test_field_data_len () ; fn test_field_data () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SolAccountInfo > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . data) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (SolAccountInfo) , "::" , stringify ! (data))) ; } test_field_data () ; fn test_field_owner () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SolAccountInfo > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . owner) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (SolAccountInfo) , "::" , stringify ! (owner))) ; } test_field_owner () ; fn test_field_rent_epoch () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SolAccountInfo > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . rent_epoch) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (SolAccountInfo) , "::" , stringify ! (rent_epoch))) ; } test_field_rent_epoch () ; fn test_field_is_signer () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SolAccountInfo > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . is_signer) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (SolAccountInfo) , "::" , stringify ! (is_signer))) ; } test_field_is_signer () ; fn test_field_is_writable () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SolAccountInfo > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . is_writable) as usize - ptr as usize } , 49usize , concat ! ("Offset of field: " , stringify ! (SolAccountInfo) , "::" , stringify ! (is_writable))) ; } test_field_is_writable () ; fn test_field_executable () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SolAccountInfo > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . executable) as usize - ptr as usize } , 50usize , concat ! ("Offset of field: " , stringify ! (SolAccountInfo) , "::" , stringify ! (executable))) ; } test_field_executable () ; } # [doc = " Structure that the program's entrypoint input data is deserialized into."] # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct SolParameters { pub ka : * mut SolAccountInfo , # [doc = " Pointer to an array of SolAccountInfo, must already"] # [doc = "point to an array of SolAccountInfos"] pub ka_num : u64 , # [doc = " Number of SolAccountInfo entries in `ka`"] pub data : * const u8 , # [doc = " pointer to the instruction data"] pub data_len : u64 , # [doc = " Length in bytes of the instruction data"] pub program_id : * const SolPubkey , } # [test] fn bindgen_test_layout_SolParameters () { assert_eq ! (:: std :: mem :: size_of :: < SolParameters > () , 40usize , concat ! ("Size of: " , stringify ! (SolParameters))) ; assert_eq ! (:: std :: mem :: align_of :: < SolParameters > () , 8usize , concat ! ("Alignment of " , stringify ! (SolParameters))) ; fn test_field_ka () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SolParameters > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ka) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (SolParameters) , "::" , stringify ! (ka))) ; } test_field_ka () ; fn test_field_ka_num () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SolParameters > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ka_num) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (SolParameters) , "::" , stringify ! (ka_num))) ; } test_field_ka_num () ; fn test_field_data () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SolParameters > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . data) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (SolParameters) , "::" , stringify ! (data))) ; } test_field_data () ; fn test_field_data_len () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SolParameters > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . data_len) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (SolParameters) , "::" , stringify ! (data_len))) ; } test_field_data_len () ; fn test_field_program_id () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SolParameters > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . program_id) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (SolParameters) , "::" , stringify ! (program_id))) ; } test_field_program_id () ; } extern "C" { # [doc = " Program instruction entrypoint"] # [doc = ""] # [doc = " @param input Buffer of serialized input parameters.  Use sol_deserialize() to decode"] # [doc = " @return 0 if the instruction executed successfully"] pub fn entrypoint (input : * const u8) -> u64 ; } # [doc = " Maximum CPI instruction data size. 10 KiB was chosen to ensure that CPI"] # [doc = " instructions are not more limited than transaction instructions if the size"] # [doc = " of transactions is doubled in the future."] pub const MAX_CPI_INSTRUCTION_DATA_LEN : u64 = 10240 ; # [doc = " Maximum CPI instruction accounts. 255 was chosen to ensure that instruction"] # [doc = " accounts are always within the maximum instruction account limit for BPF"] # [doc = " program instructions."] pub const MAX_CPI_INSTRUCTION_ACCOUNTS : u8 = 255 ; # [doc = " Maximum number of account info structs that can be used in a single CPI"] # [doc = " invocation. A limit on account info structs is effectively the same as"] # [doc = " limiting the number of unique accounts. 128 was chosen to match the max"] # [doc = " number of locked accounts per transaction (MAX_TX_ACCOUNT_LOCKS)."] pub const MAX_CPI_ACCOUNT_INFOS : u16 = 128 ; # [doc = " Account Meta"] # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct SolAccountMeta { pub pubkey : * mut SolPubkey , # [doc = " An account's public key"] pub is_writable : bool , # [doc = " True if the `pubkey` can be loaded as a read-write account"] pub is_signer : bool , } # [test] fn bindgen_test_layout_SolAccountMeta () { assert_eq ! (:: std :: mem :: size_of :: < SolAccountMeta > () , 16usize , concat ! ("Size of: " , stringify ! (SolAccountMeta))) ; assert_eq ! (:: std :: mem :: align_of :: < SolAccountMeta > () , 8usize , concat ! ("Alignment of " , stringify ! (SolAccountMeta))) ; fn test_field_pubkey () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SolAccountMeta > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . pubkey) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (SolAccountMeta) , "::" , stringify ! (pubkey))) ; } test_field_pubkey () ; fn test_field_is_writable () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SolAccountMeta > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . is_writable) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (SolAccountMeta) , "::" , stringify ! (is_writable))) ; } test_field_is_writable () ; fn test_field_is_signer () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SolAccountMeta > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . is_signer) as usize - ptr as usize } , 9usize , concat ! ("Offset of field: " , stringify ! (SolAccountMeta) , "::" , stringify ! (is_signer))) ; } test_field_is_signer () ; } # [doc = " Instruction"] # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct SolInstruction { pub program_id : * mut SolPubkey , # [doc = " Pubkey of the instruction processor that executes this instruction"] pub accounts : * mut SolAccountMeta , # [doc = " Metadata for what accounts should be passed to the instruction processor"] pub account_len : u64 , # [doc = " Number of SolAccountMetas"] pub data : * mut u8 , # [doc = " Opaque data passed to the instruction processor"] pub data_len : u64 , } # [test] fn bindgen_test_layout_SolInstruction () { assert_eq ! (:: std :: mem :: size_of :: < SolInstruction > () , 40usize , concat ! ("Size of: " , stringify ! (SolInstruction))) ; assert_eq ! (:: std :: mem :: align_of :: < SolInstruction > () , 8usize , concat ! ("Alignment of " , stringify ! (SolInstruction))) ; fn test_field_program_id () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SolInstruction > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . program_id) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (SolInstruction) , "::" , stringify ! (program_id))) ; } test_field_program_id () ; fn test_field_accounts () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SolInstruction > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . accounts) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (SolInstruction) , "::" , stringify ! (accounts))) ; } test_field_accounts () ; fn test_field_account_len () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SolInstruction > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . account_len) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (SolInstruction) , "::" , stringify ! (account_len))) ; } test_field_account_len () ; fn test_field_data () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SolInstruction > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . data) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (SolInstruction) , "::" , stringify ! (data))) ; } test_field_data () ; fn test_field_data_len () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SolInstruction > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . data_len) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (SolInstruction) , "::" , stringify ! (data_len))) ; } test_field_data_len () ; } extern "C" { pub fn sol_invoke_signed_c (arg1 : * const SolInstruction , arg2 : * const SolAccountInfo , arg3 : :: std :: os :: raw :: c_int , arg4 : * const SolSignerSeeds , arg5 : :: std :: os :: raw :: c_int) -> u64 ; } extern "C" { pub fn sol_keccak256 (arg1 : * const SolBytes , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut u8) -> u64 ; } extern "C" { pub fn sol_log_ (arg1 : * const :: std :: os :: raw :: c_char , arg2 : u64) ; } extern "C" { pub fn sol_log_64_ (arg1 : u64 , arg2 : u64 , arg3 : u64 , arg4 : u64 , arg5 : u64) ; } extern "C" { pub fn sol_log_compute_units_ () ; } extern "C" { pub fn sol_log_data (arg1 : * mut SolBytes , arg2 : u64) ; } extern "C" { pub fn sol_set_return_data (arg1 : * const u8 , arg2 : u64) ; } extern "C" { pub fn sol_get_return_data (arg1 : * mut u8 , arg2 : u64 , arg3 : * mut SolPubkey) -> u64 ; } extern "C" { pub fn sol_secp256k1_recover (arg1 : * const u8 , arg2 : u64 , arg3 : * const u8 , arg4 : * mut u8) -> u64 ; } extern "C" { pub fn sol_sha256 (arg1 : * const SolBytes , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut u8) -> u64 ; } pub const TIME_MACHINE_STRUCT_SIZE : u64 = 1200 ; pub const EXTRA_PUBLISHER_SPACE : u64 = 3072 ; extern "C" { pub static sysvar_clock : [u64 ; 4usize] ; } extern "C" { pub static compute_budget_program_id : [u64 ; 4usize] ; } # [repr (C)] # [derive (Copy , Clone)] pub union pc_pub_key { pub k1_ : [u8 ; 32usize] , pub k8_ : [u64 ; 4usize] , } # [test] fn bindgen_test_layout_pc_pub_key () { assert_eq ! (:: std :: mem :: size_of :: < pc_pub_key > () , 32usize , concat ! ("Size of: " , stringify ! (pc_pub_key))) ; assert_eq ! (:: std :: mem :: align_of :: < pc_pub_key > () , 8usize , concat ! ("Alignment of " , stringify ! (pc_pub_key))) ; fn test_field_k1_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_pub_key > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . k1_) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (pc_pub_key) , "::" , stringify ! (k1_))) ; } test_field_k1_ () ; fn test_field_k8_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_pub_key > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . k8_) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (pc_pub_key) , "::" , stringify ! (k8_))) ; } test_field_k8_ () ; } pub type pc_pub_key_t = pc_pub_key ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct pc_acc { pub magic_ : u32 , pub ver_ : u32 , pub type_ : u32 , pub size_ : u32 , } # [test] fn bindgen_test_layout_pc_acc () { assert_eq ! (:: std :: mem :: size_of :: < pc_acc > () , 16usize , concat ! ("Size of: " , stringify ! (pc_acc))) ; assert_eq ! (:: std :: mem :: align_of :: < pc_acc > () , 4usize , concat ! ("Alignment of " , stringify ! (pc_acc))) ; fn test_field_magic_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_acc > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . magic_) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (pc_acc) , "::" , stringify ! (magic_))) ; } test_field_magic_ () ; fn test_field_ver_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_acc > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ver_) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (pc_acc) , "::" , stringify ! (ver_))) ; } test_field_ver_ () ; fn test_field_type_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_acc > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . type_) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (pc_acc) , "::" , stringify ! (type_))) ; } test_field_type_ () ; fn test_field_size_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_acc > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . size_) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (pc_acc) , "::" , stringify ! (size_))) ; } test_field_size_ () ; } pub type pc_acc_t = pc_acc ; # [repr (C)] # [derive (Copy , Clone)] pub struct pc_map_table { pub magic_ : u32 , pub ver_ : u32 , pub type_ : u32 , pub size_ : u32 , pub num_ : u32 , pub unused_ : u32 , pub next_ : pc_pub_key_t , pub prod_ : [pc_pub_key_t ; 640usize] , } # [test] fn bindgen_test_layout_pc_map_table () { assert_eq ! (:: std :: mem :: size_of :: < pc_map_table > () , 20536usize , concat ! ("Size of: " , stringify ! (pc_map_table))) ; assert_eq ! (:: std :: mem :: align_of :: < pc_map_table > () , 8usize , concat ! ("Alignment of " , stringify ! (pc_map_table))) ; fn test_field_magic_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_map_table > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . magic_) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (pc_map_table) , "::" , stringify ! (magic_))) ; } test_field_magic_ () ; fn test_field_ver_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_map_table > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ver_) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (pc_map_table) , "::" , stringify ! (ver_))) ; } test_field_ver_ () ; fn test_field_type_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_map_table > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . type_) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (pc_map_table) , "::" , stringify ! (type_))) ; } test_field_type_ () ; fn test_field_size_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_map_table > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . size_) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (pc_map_table) , "::" , stringify ! (size_))) ; } test_field_size_ () ; fn test_field_num_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_map_table > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . num_) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (pc_map_table) , "::" , stringify ! (num_))) ; } test_field_num_ () ; fn test_field_unused_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_map_table > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . unused_) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (pc_map_table) , "::" , stringify ! (unused_))) ; } test_field_unused_ () ; fn test_field_next_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_map_table > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . next_) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (pc_map_table) , "::" , stringify ! (next_))) ; } test_field_next_ () ; fn test_field_prod_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_map_table > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prod_) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (pc_map_table) , "::" , stringify ! (prod_))) ; } test_field_prod_ () ; } pub type pc_map_table_t = pc_map_table ; # [repr (C)] # [derive (Debug)] pub struct pc_str { pub len_ : u8 , pub data_ : __IncompleteArrayField < :: std :: os :: raw :: c_char > , } # [test] fn bindgen_test_layout_pc_str () { assert_eq ! (:: std :: mem :: size_of :: < pc_str > () , 1usize , concat ! ("Size of: " , stringify ! (pc_str))) ; assert_eq ! (:: std :: mem :: align_of :: < pc_str > () , 1usize , concat ! ("Alignment of " , stringify ! (pc_str))) ; fn test_field_len_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_str > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . len_) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (pc_str) , "::" , stringify ! (len_))) ; } test_field_len_ () ; fn test_field_data_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_str > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . data_) as usize - ptr as usize } , 1usize , concat ! ("Offset of field: " , stringify ! (pc_str) , "::" , stringify ! (data_))) ; } test_field_data_ () ; } pub type pc_str_t = pc_str ; # [repr (C)] # [derive (Copy , Clone)] pub struct pc_prod { pub magic_ : u32 , pub ver_ : u32 , pub type_ : u32 , pub size_ : u32 , pub px_acc_ : pc_pub_key_t , } # [test] fn bindgen_test_layout_pc_prod () { assert_eq ! (:: std :: mem :: size_of :: < pc_prod > () , 48usize , concat ! ("Size of: " , stringify ! (pc_prod))) ; assert_eq ! (:: std :: mem :: align_of :: < pc_prod > () , 8usize , concat ! ("Alignment of " , stringify ! (pc_prod))) ; fn test_field_magic_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_prod > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . magic_) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (pc_prod) , "::" , stringify ! (magic_))) ; } test_field_magic_ () ; fn test_field_ver_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_prod > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ver_) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (pc_prod) , "::" , stringify ! (ver_))) ; } test_field_ver_ () ; fn test_field_type_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_prod > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . type_) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (pc_prod) , "::" , stringify ! (type_))) ; } test_field_type_ () ; fn test_field_size_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_prod > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . size_) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (pc_prod) , "::" , stringify ! (size_))) ; } test_field_size_ () ; fn test_field_px_acc_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_prod > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . px_acc_) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (pc_prod) , "::" , stringify ! (px_acc_))) ; } test_field_px_acc_ () ; } pub type pc_prod_t = pc_prod ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct pc_price_info { pub price_ : i64 , pub conf_ : u64 , pub status_ : u32 , pub corp_act_status_ : u32 , pub pub_slot_ : u64 , } # [test] fn bindgen_test_layout_pc_price_info () { assert_eq ! (:: std :: mem :: size_of :: < pc_price_info > () , 32usize , concat ! ("Size of: " , stringify ! (pc_price_info))) ; assert_eq ! (:: std :: mem :: align_of :: < pc_price_info > () , 8usize , concat ! ("Alignment of " , stringify ! (pc_price_info))) ; fn test_field_price_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price_info > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . price_) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (pc_price_info) , "::" , stringify ! (price_))) ; } test_field_price_ () ; fn test_field_conf_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price_info > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . conf_) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (pc_price_info) , "::" , stringify ! (conf_))) ; } test_field_conf_ () ; fn test_field_status_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price_info > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . status_) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (pc_price_info) , "::" , stringify ! (status_))) ; } test_field_status_ () ; fn test_field_corp_act_status_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price_info > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . corp_act_status_) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (pc_price_info) , "::" , stringify ! (corp_act_status_))) ; } test_field_corp_act_status_ () ; fn test_field_pub_slot_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price_info > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . pub_slot_) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (pc_price_info) , "::" , stringify ! (pub_slot_))) ; } test_field_pub_slot_ () ; } pub type pc_price_info_t = pc_price_info ; # [repr (C)] # [derive (Copy , Clone)] pub struct pc_price_comp { pub pub_ : pc_pub_key_t , pub agg_ : pc_price_info_t , pub latest_ : pc_price_info_t , } # [test] fn bindgen_test_layout_pc_price_comp () { assert_eq ! (:: std :: mem :: size_of :: < pc_price_comp > () , 96usize , concat ! ("Size of: " , stringify ! (pc_price_comp))) ; assert_eq ! (:: std :: mem :: align_of :: < pc_price_comp > () , 8usize , concat ! ("Alignment of " , stringify ! (pc_price_comp))) ; fn test_field_pub_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price_comp > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . pub_) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (pc_price_comp) , "::" , stringify ! (pub_))) ; } test_field_pub_ () ; fn test_field_agg_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price_comp > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . agg_) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (pc_price_comp) , "::" , stringify ! (agg_))) ; } test_field_agg_ () ; fn test_field_latest_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price_comp > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . latest_) as usize - ptr as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (pc_price_comp) , "::" , stringify ! (latest_))) ; } test_field_latest_ () ; } pub type pc_price_comp_t = pc_price_comp ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct pc_ema { pub val_ : i64 , pub numer_ : i64 , pub denom_ : i64 , } # [test] fn bindgen_test_layout_pc_ema () { assert_eq ! (:: std :: mem :: size_of :: < pc_ema > () , 24usize , concat ! ("Size of: " , stringify ! (pc_ema))) ; assert_eq ! (:: std :: mem :: align_of :: < pc_ema > () , 8usize , concat ! ("Alignment of " , stringify ! (pc_ema))) ; fn test_field_val_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_ema > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . val_) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (pc_ema) , "::" , stringify ! (val_))) ; } test_field_val_ () ; fn test_field_numer_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_ema > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . numer_) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (pc_ema) , "::" , stringify ! (numer_))) ; } test_field_numer_ () ; fn test_field_denom_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_ema > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . denom_) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (pc_ema) , "::" , stringify ! (denom_))) ; } test_field_denom_ () ; } pub type pc_ema_t = pc_ema ; # [repr (C)] # [derive (Copy , Clone)] pub struct pc_price { pub magic_ : u32 , pub ver_ : u32 , pub type_ : u32 , pub size_ : u32 , pub ptype_ : u32 , pub expo_ : i32 , pub num_ : u32 , pub num_qt_ : u32 , pub last_slot_ : u64 , pub valid_slot_ : u64 , pub twap_ : pc_ema_t , pub twac_ : pc_ema_t , pub timestamp_ : i64 , pub min_pub_ : u8 , pub drv2_ : i8 , pub drv3_ : i16 , pub drv4_ : i32 , pub prod_ : pc_pub_key_t , pub next_ : pc_pub_key_t , pub prev_slot_ : u64 , pub prev_price_ : i64 , pub prev_conf_ : u64 , pub prev_timestamp_ : i64 , pub agg_ : pc_price_info_t , pub comp_ : [pc_price_comp_t ; 32usize] , } # [test] fn bindgen_test_layout_pc_price () { assert_eq ! (:: std :: mem :: size_of :: < pc_price > () , 3312usize , concat ! ("Size of: " , stringify ! (pc_price))) ; assert_eq ! (:: std :: mem :: align_of :: < pc_price > () , 8usize , concat ! ("Alignment of " , stringify ! (pc_price))) ; fn test_field_magic_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . magic_) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (pc_price) , "::" , stringify ! (magic_))) ; } test_field_magic_ () ; fn test_field_ver_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ver_) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (pc_price) , "::" , stringify ! (ver_))) ; } test_field_ver_ () ; fn test_field_type_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . type_) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (pc_price) , "::" , stringify ! (type_))) ; } test_field_type_ () ; fn test_field_size_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . size_) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (pc_price) , "::" , stringify ! (size_))) ; } test_field_size_ () ; fn test_field_ptype_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ptype_) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (pc_price) , "::" , stringify ! (ptype_))) ; } test_field_ptype_ () ; fn test_field_expo_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . expo_) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (pc_price) , "::" , stringify ! (expo_))) ; } test_field_expo_ () ; fn test_field_num_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . num_) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (pc_price) , "::" , stringify ! (num_))) ; } test_field_num_ () ; fn test_field_num_qt_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . num_qt_) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (pc_price) , "::" , stringify ! (num_qt_))) ; } test_field_num_qt_ () ; fn test_field_last_slot_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . last_slot_) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (pc_price) , "::" , stringify ! (last_slot_))) ; } test_field_last_slot_ () ; fn test_field_valid_slot_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . valid_slot_) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (pc_price) , "::" , stringify ! (valid_slot_))) ; } test_field_valid_slot_ () ; fn test_field_twap_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . twap_) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (pc_price) , "::" , stringify ! (twap_))) ; } test_field_twap_ () ; fn test_field_twac_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . twac_) as usize - ptr as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (pc_price) , "::" , stringify ! (twac_))) ; } test_field_twac_ () ; fn test_field_timestamp_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . timestamp_) as usize - ptr as usize } , 96usize , concat ! ("Offset of field: " , stringify ! (pc_price) , "::" , stringify ! (timestamp_))) ; } test_field_timestamp_ () ; fn test_field_min_pub_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . min_pub_) as usize - ptr as usize } , 104usize , concat ! ("Offset of field: " , stringify ! (pc_price) , "::" , stringify ! (min_pub_))) ; } test_field_min_pub_ () ; fn test_field_drv2_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . drv2_) as usize - ptr as usize } , 105usize , concat ! ("Offset of field: " , stringify ! (pc_price) , "::" , stringify ! (drv2_))) ; } test_field_drv2_ () ; fn test_field_drv3_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . drv3_) as usize - ptr as usize } , 106usize , concat ! ("Offset of field: " , stringify ! (pc_price) , "::" , stringify ! (drv3_))) ; } test_field_drv3_ () ; fn test_field_drv4_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . drv4_) as usize - ptr as usize } , 108usize , concat ! ("Offset of field: " , stringify ! (pc_price) , "::" , stringify ! (drv4_))) ; } test_field_drv4_ () ; fn test_field_prod_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prod_) as usize - ptr as usize } , 112usize , concat ! ("Offset of field: " , stringify ! (pc_price) , "::" , stringify ! (prod_))) ; } test_field_prod_ () ; fn test_field_next_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . next_) as usize - ptr as usize } , 144usize , concat ! ("Offset of field: " , stringify ! (pc_price) , "::" , stringify ! (next_))) ; } test_field_next_ () ; fn test_field_prev_slot_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prev_slot_) as usize - ptr as usize } , 176usize , concat ! ("Offset of field: " , stringify ! (pc_price) , "::" , stringify ! (prev_slot_))) ; } test_field_prev_slot_ () ; fn test_field_prev_price_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prev_price_) as usize - ptr as usize } , 184usize , concat ! ("Offset of field: " , stringify ! (pc_price) , "::" , stringify ! (prev_price_))) ; } test_field_prev_price_ () ; fn test_field_prev_conf_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prev_conf_) as usize - ptr as usize } , 192usize , concat ! ("Offset of field: " , stringify ! (pc_price) , "::" , stringify ! (prev_conf_))) ; } test_field_prev_conf_ () ; fn test_field_prev_timestamp_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prev_timestamp_) as usize - ptr as usize } , 200usize , concat ! ("Offset of field: " , stringify ! (pc_price) , "::" , stringify ! (prev_timestamp_))) ; } test_field_prev_timestamp_ () ; fn test_field_agg_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . agg_) as usize - ptr as usize } , 208usize , concat ! ("Offset of field: " , stringify ! (pc_price) , "::" , stringify ! (agg_))) ; } test_field_agg_ () ; fn test_field_comp_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < pc_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . comp_) as usize - ptr as usize } , 240usize , concat ! ("Offset of field: " , stringify ! (pc_price) , "::" , stringify ! (comp_))) ; } test_field_comp_ () ; } pub type pc_price_t = pc_price ; pub const PRICE_ACCOUNT_SIZE : u64 = 7584 ; pub const command_t_e_cmd_init_mapping : command_t = 0 ; pub const command_t_e_cmd_add_mapping : command_t = 1 ; pub const command_t_e_cmd_add_product : command_t = 2 ; pub const command_t_e_cmd_upd_product : command_t = 3 ; pub const command_t_e_cmd_add_price : command_t = 4 ; pub const command_t_e_cmd_add_publisher : command_t = 5 ; pub const command_t_e_cmd_del_publisher : command_t = 6 ; pub const command_t_e_cmd_upd_price : command_t = 7 ; pub const command_t_e_cmd_agg_price : command_t = 8 ; pub const command_t_e_cmd_init_price : command_t = 9 ; pub const command_t_e_cmd_init_test : command_t = 10 ; pub const command_t_e_cmd_upd_test : command_t = 11 ; pub const command_t_e_cmd_set_min_pub : command_t = 12 ; pub const command_t_e_cmd_upd_price_no_fail_on_error : command_t = 13 ; pub const command_t_e_cmd_resize_price_account : command_t = 14 ; pub const command_t_e_cmd_del_price : command_t = 15 ; pub const command_t_e_cmd_del_product : command_t = 16 ; pub type command_t = :: std :: os :: raw :: c_uint ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct cmd_hdr { pub ver_ : u32 , pub cmd_ : i32 , } # [test] fn bindgen_test_layout_cmd_hdr () { assert_eq ! (:: std :: mem :: size_of :: < cmd_hdr > () , 8usize , concat ! ("Size of: " , stringify ! (cmd_hdr))) ; assert_eq ! (:: std :: mem :: align_of :: < cmd_hdr > () , 4usize , concat ! ("Alignment of " , stringify ! (cmd_hdr))) ; fn test_field_ver_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_hdr > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ver_) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (cmd_hdr) , "::" , stringify ! (ver_))) ; } test_field_ver_ () ; fn test_field_cmd_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_hdr > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cmd_) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (cmd_hdr) , "::" , stringify ! (cmd_))) ; } test_field_cmd_ () ; } pub type cmd_hdr_t = cmd_hdr ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct cmd_add_product { pub ver_ : u32 , pub cmd_ : i32 , } # [test] fn bindgen_test_layout_cmd_add_product () { assert_eq ! (:: std :: mem :: size_of :: < cmd_add_product > () , 8usize , concat ! ("Size of: " , stringify ! (cmd_add_product))) ; assert_eq ! (:: std :: mem :: align_of :: < cmd_add_product > () , 4usize , concat ! ("Alignment of " , stringify ! (cmd_add_product))) ; fn test_field_ver_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_add_product > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ver_) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (cmd_add_product) , "::" , stringify ! (ver_))) ; } test_field_ver_ () ; fn test_field_cmd_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_add_product > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cmd_) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (cmd_add_product) , "::" , stringify ! (cmd_))) ; } test_field_cmd_ () ; } pub type cmd_add_product_t = cmd_add_product ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct cmd_upd_product { pub ver_ : u32 , pub cmd_ : i32 , } # [test] fn bindgen_test_layout_cmd_upd_product () { assert_eq ! (:: std :: mem :: size_of :: < cmd_upd_product > () , 8usize , concat ! ("Size of: " , stringify ! (cmd_upd_product))) ; assert_eq ! (:: std :: mem :: align_of :: < cmd_upd_product > () , 4usize , concat ! ("Alignment of " , stringify ! (cmd_upd_product))) ; fn test_field_ver_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_upd_product > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ver_) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (cmd_upd_product) , "::" , stringify ! (ver_))) ; } test_field_ver_ () ; fn test_field_cmd_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_upd_product > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cmd_) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (cmd_upd_product) , "::" , stringify ! (cmd_))) ; } test_field_cmd_ () ; } pub type cmd_upd_product_t = cmd_upd_product ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct cmd_add_price { pub ver_ : u32 , pub cmd_ : i32 , pub expo_ : i32 , pub ptype_ : u32 , } # [test] fn bindgen_test_layout_cmd_add_price () { assert_eq ! (:: std :: mem :: size_of :: < cmd_add_price > () , 16usize , concat ! ("Size of: " , stringify ! (cmd_add_price))) ; assert_eq ! (:: std :: mem :: align_of :: < cmd_add_price > () , 4usize , concat ! ("Alignment of " , stringify ! (cmd_add_price))) ; fn test_field_ver_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_add_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ver_) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (cmd_add_price) , "::" , stringify ! (ver_))) ; } test_field_ver_ () ; fn test_field_cmd_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_add_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cmd_) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (cmd_add_price) , "::" , stringify ! (cmd_))) ; } test_field_cmd_ () ; fn test_field_expo_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_add_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . expo_) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (cmd_add_price) , "::" , stringify ! (expo_))) ; } test_field_expo_ () ; fn test_field_ptype_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_add_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ptype_) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (cmd_add_price) , "::" , stringify ! (ptype_))) ; } test_field_ptype_ () ; } pub type cmd_add_price_t = cmd_add_price ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct cmd_init_price { pub ver_ : u32 , pub cmd_ : i32 , pub expo_ : i32 , pub ptype_ : u32 , } # [test] fn bindgen_test_layout_cmd_init_price () { assert_eq ! (:: std :: mem :: size_of :: < cmd_init_price > () , 16usize , concat ! ("Size of: " , stringify ! (cmd_init_price))) ; assert_eq ! (:: std :: mem :: align_of :: < cmd_init_price > () , 4usize , concat ! ("Alignment of " , stringify ! (cmd_init_price))) ; fn test_field_ver_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_init_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ver_) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (cmd_init_price) , "::" , stringify ! (ver_))) ; } test_field_ver_ () ; fn test_field_cmd_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_init_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cmd_) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (cmd_init_price) , "::" , stringify ! (cmd_))) ; } test_field_cmd_ () ; fn test_field_expo_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_init_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . expo_) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (cmd_init_price) , "::" , stringify ! (expo_))) ; } test_field_expo_ () ; fn test_field_ptype_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_init_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ptype_) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (cmd_init_price) , "::" , stringify ! (ptype_))) ; } test_field_ptype_ () ; } pub type cmd_init_price_t = cmd_init_price ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct cmd_set_min_pub { pub ver_ : u32 , pub cmd_ : i32 , pub min_pub_ : u8 , } # [test] fn bindgen_test_layout_cmd_set_min_pub () { assert_eq ! (:: std :: mem :: size_of :: < cmd_set_min_pub > () , 12usize , concat ! ("Size of: " , stringify ! (cmd_set_min_pub))) ; assert_eq ! (:: std :: mem :: align_of :: < cmd_set_min_pub > () , 4usize , concat ! ("Alignment of " , stringify ! (cmd_set_min_pub))) ; fn test_field_ver_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_set_min_pub > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ver_) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (cmd_set_min_pub) , "::" , stringify ! (ver_))) ; } test_field_ver_ () ; fn test_field_cmd_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_set_min_pub > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cmd_) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (cmd_set_min_pub) , "::" , stringify ! (cmd_))) ; } test_field_cmd_ () ; fn test_field_min_pub_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_set_min_pub > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . min_pub_) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (cmd_set_min_pub) , "::" , stringify ! (min_pub_))) ; } test_field_min_pub_ () ; } pub type cmd_set_min_pub_t = cmd_set_min_pub ; # [repr (C)] # [derive (Copy , Clone)] pub struct cmd_add_publisher { pub ver_ : u32 , pub cmd_ : i32 , pub pub_ : pc_pub_key_t , } # [test] fn bindgen_test_layout_cmd_add_publisher () { assert_eq ! (:: std :: mem :: size_of :: < cmd_add_publisher > () , 40usize , concat ! ("Size of: " , stringify ! (cmd_add_publisher))) ; assert_eq ! (:: std :: mem :: align_of :: < cmd_add_publisher > () , 8usize , concat ! ("Alignment of " , stringify ! (cmd_add_publisher))) ; fn test_field_ver_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_add_publisher > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ver_) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (cmd_add_publisher) , "::" , stringify ! (ver_))) ; } test_field_ver_ () ; fn test_field_cmd_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_add_publisher > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cmd_) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (cmd_add_publisher) , "::" , stringify ! (cmd_))) ; } test_field_cmd_ () ; fn test_field_pub_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_add_publisher > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . pub_) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (cmd_add_publisher) , "::" , stringify ! (pub_))) ; } test_field_pub_ () ; } pub type cmd_add_publisher_t = cmd_add_publisher ; # [repr (C)] # [derive (Copy , Clone)] pub struct cmd_del_publisher { pub ver_ : u32 , pub cmd_ : i32 , pub pub_ : pc_pub_key_t , } # [test] fn bindgen_test_layout_cmd_del_publisher () { assert_eq ! (:: std :: mem :: size_of :: < cmd_del_publisher > () , 40usize , concat ! ("Size of: " , stringify ! (cmd_del_publisher))) ; assert_eq ! (:: std :: mem :: align_of :: < cmd_del_publisher > () , 8usize , concat ! ("Alignment of " , stringify ! (cmd_del_publisher))) ; fn test_field_ver_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_del_publisher > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ver_) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (cmd_del_publisher) , "::" , stringify ! (ver_))) ; } test_field_ver_ () ; fn test_field_cmd_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_del_publisher > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cmd_) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (cmd_del_publisher) , "::" , stringify ! (cmd_))) ; } test_field_cmd_ () ; fn test_field_pub_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_del_publisher > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . pub_) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (cmd_del_publisher) , "::" , stringify ! (pub_))) ; } test_field_pub_ () ; } pub type cmd_del_publisher_t = cmd_del_publisher ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct cmd_upd_price { pub ver_ : u32 , pub cmd_ : i32 , pub status_ : u32 , pub unused_ : u32 , pub price_ : i64 , pub conf_ : u64 , pub pub_slot_ : u64 , } # [test] fn bindgen_test_layout_cmd_upd_price () { assert_eq ! (:: std :: mem :: size_of :: < cmd_upd_price > () , 40usize , concat ! ("Size of: " , stringify ! (cmd_upd_price))) ; assert_eq ! (:: std :: mem :: align_of :: < cmd_upd_price > () , 8usize , concat ! ("Alignment of " , stringify ! (cmd_upd_price))) ; fn test_field_ver_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_upd_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ver_) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (cmd_upd_price) , "::" , stringify ! (ver_))) ; } test_field_ver_ () ; fn test_field_cmd_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_upd_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cmd_) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (cmd_upd_price) , "::" , stringify ! (cmd_))) ; } test_field_cmd_ () ; fn test_field_status_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_upd_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . status_) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (cmd_upd_price) , "::" , stringify ! (status_))) ; } test_field_status_ () ; fn test_field_unused_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_upd_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . unused_) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (cmd_upd_price) , "::" , stringify ! (unused_))) ; } test_field_unused_ () ; fn test_field_price_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_upd_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . price_) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (cmd_upd_price) , "::" , stringify ! (price_))) ; } test_field_price_ () ; fn test_field_conf_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_upd_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . conf_) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (cmd_upd_price) , "::" , stringify ! (conf_))) ; } test_field_conf_ () ; fn test_field_pub_slot_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_upd_price > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . pub_slot_) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (cmd_upd_price) , "::" , stringify ! (pub_slot_))) ; } test_field_pub_slot_ () ; } pub type cmd_upd_price_t = cmd_upd_price ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct cmd_upd_test { pub ver_ : u32 , pub cmd_ : i32 , pub num_ : u32 , pub expo_ : i32 , pub slot_diff_ : [i8 ; 32usize] , pub price_ : [i64 ; 32usize] , pub conf_ : [u64 ; 32usize] , } # [test] fn bindgen_test_layout_cmd_upd_test () { assert_eq ! (:: std :: mem :: size_of :: < cmd_upd_test > () , 560usize , concat ! ("Size of: " , stringify ! (cmd_upd_test))) ; assert_eq ! (:: std :: mem :: align_of :: < cmd_upd_test > () , 8usize , concat ! ("Alignment of " , stringify ! (cmd_upd_test))) ; fn test_field_ver_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_upd_test > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ver_) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (cmd_upd_test) , "::" , stringify ! (ver_))) ; } test_field_ver_ () ; fn test_field_cmd_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_upd_test > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cmd_) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (cmd_upd_test) , "::" , stringify ! (cmd_))) ; } test_field_cmd_ () ; fn test_field_num_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_upd_test > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . num_) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (cmd_upd_test) , "::" , stringify ! (num_))) ; } test_field_num_ () ; fn test_field_expo_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_upd_test > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . expo_) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (cmd_upd_test) , "::" , stringify ! (expo_))) ; } test_field_expo_ () ; fn test_field_slot_diff_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_upd_test > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . slot_diff_) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (cmd_upd_test) , "::" , stringify ! (slot_diff_))) ; } test_field_slot_diff_ () ; fn test_field_price_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_upd_test > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . price_) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (cmd_upd_test) , "::" , stringify ! (price_))) ; } test_field_price_ () ; fn test_field_conf_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < cmd_upd_test > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . conf_) as usize - ptr as usize } , 304usize , concat ! ("Offset of field: " , stringify ! (cmd_upd_test) , "::" , stringify ! (conf_))) ; } test_field_conf_ () ; } pub type cmd_upd_test_t = cmd_upd_test ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct sysvar_clock { pub slot_ : u64 , pub epoch_start_timestamp_ : i64 , pub epoch_ : u64 , pub leader_schedule_epoch_ : u64 , pub unix_timestamp_ : i64 , } # [test] fn bindgen_test_layout_sysvar_clock () { assert_eq ! (:: std :: mem :: size_of :: < sysvar_clock > () , 40usize , concat ! ("Size of: " , stringify ! (sysvar_clock))) ; assert_eq ! (:: std :: mem :: align_of :: < sysvar_clock > () , 8usize , concat ! ("Alignment of " , stringify ! (sysvar_clock))) ; fn test_field_slot_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < sysvar_clock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . slot_) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (sysvar_clock) , "::" , stringify ! (slot_))) ; } test_field_slot_ () ; fn test_field_epoch_start_timestamp_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < sysvar_clock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . epoch_start_timestamp_) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (sysvar_clock) , "::" , stringify ! (epoch_start_timestamp_))) ; } test_field_epoch_start_timestamp_ () ; fn test_field_epoch_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < sysvar_clock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . epoch_) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (sysvar_clock) , "::" , stringify ! (epoch_))) ; } test_field_epoch_ () ; fn test_field_leader_schedule_epoch_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < sysvar_clock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . leader_schedule_epoch_) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (sysvar_clock) , "::" , stringify ! (leader_schedule_epoch_))) ; } test_field_leader_schedule_epoch_ () ; fn test_field_unix_timestamp_ () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < sysvar_clock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . unix_timestamp_) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (sysvar_clock) , "::" , stringify ! (unix_timestamp_))) ; } test_field_unix_timestamp_ () ; } pub type sysvar_clock_t = sysvar_clock ; pub const PC_PRICE_T_COMP_OFFSET : size_t = 240 ; pub const PC_MAP_TABLE_T_PROD_OFFSET : size_t = 56 ;